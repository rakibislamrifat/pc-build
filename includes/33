<script>

    document.addEventListener("DOMContentLoaded", function () {

      // Build checkout URL and open cart in Amazon
      document.getElementById("checkoutAllBtn").addEventListener("click", function () {
          const rows = document.querySelectorAll(".row");
          let asins = [];
          const associateTag = pcbuild_ajax_object.associate_tag;

          rows.forEach(row => {
            const categorySpan = row.querySelector(".componentName");
            if (categorySpan) {
              const category = categorySpan.textContent.trim().toLowerCase();
              const storedData = localStorage.getItem(`pcbuild_${category}`);
              if (storedData) {
                try {
                  const product = JSON.parse(storedData);
                  if (product.asin) {
                    asins.push(product.asin);
                  }
                } catch (e) {
                  console.error(`Invalid JSON for ${category}`, e);
                }
              }
            }
          });

          if (asins.length === 0) {
            alert("Please select some parts before checking out.");
            return;
          }

          let cartUrl = `https://www.amazon.com/gp/aws/cart/add.html?AssociateTag=${associateTag}`;
          asins.forEach((asin, index) => {
            const num = index + 1;
            cartUrl += `&ASIN.${num}=${asin}&Quantity.${num}=1`;
          });

          window.open(cartUrl, "_blank");
        });
        
        // Redicting function
        document.querySelectorAll('[data-redirect]').forEach(el => {
            el.addEventListener("click", function () {
                const target = this.getAttribute("data-redirect");
                if (target) window.location.href = target;
            });
        });

    });

    document.addEventListener("DOMContentLoaded", function () {
      const partTriggers = document.querySelectorAll(".pc-part");
      const partModal = document.getElementById("cpuModal");
      const modalOverlay = document.getElementById("modalOverlay");
      const popupContent = document.getElementById("popupContent");

      // Restore selected parts from localStorage on page load
      const rows = document.querySelectorAll(".row");
      rows.forEach(row => {
        const categorySpan = row.querySelector(".componentName");
        if (categorySpan) {
          const category = categorySpan.textContent.trim().toLowerCase();
          const savedData = localStorage.getItem(`pcbuild_${category}`);
          if (savedData) {
            const parsedData = JSON.parse(savedData);
            updateRow(category, parsedData);
          }
        }
      });

      // Handle clicking on a component part to open modal
      if (partTriggers.length && partModal && modalOverlay && popupContent) {
        partTriggers.forEach(trigger => {
          trigger.addEventListener("click", function () {
            const row = trigger.closest(".row");
            const categorySpan = row.querySelector(".componentName");
            const category = categorySpan ? categorySpan.textContent.trim() : "CPU";

            // Save category for modal context
            partModal.setAttribute('data-current-category', category);

            // Show modal and overlay
            partModal.style.display = "block";
            modalOverlay.style.display = "block";

            // Load modal product list dynamically via AJAX
            fetch(pcbuild_ajax_object.ajax_url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              body: 'action=load_pcbuild_parts&category=' + encodeURIComponent(category)
            })
            .then(response => response.text())
            .then(html => {
              popupContent.innerHTML = html;
            });
          });
        });

        // Close modal if overlay is clicked
        modalOverlay.addEventListener("click", function () {
          closePartModal();
        });

      }

      // Handle "Add to Builder" button clicks
      document.addEventListener("click", function (e) {
        if (e.target.classList.contains("add-to-builder")) {
          const button = e.target;

          const productData = {
            title: button.dataset.title,
            image: button.dataset.image,
            base: button.dataset.base,
            promo: button.dataset.promo,
            shipping: button.dataset.shipping,
            tax: button.dataset.tax,
            availability: button.dataset.availability,
            price: button.dataset.price,
            affiliateUrl: button.dataset.affiliateUrl,
            asin: button.dataset.asin,
            rating: button.dataset.rating || ''
          };

          const category = button.dataset.category.toLowerCase();
          localStorage.setItem(`pcbuild_${category}`, JSON.stringify(productData));

          updateRow(category, productData);
          closePartModal();
        }
      });

      // Update selected part's UI in the builder list
      function updateRow(category, data) {
        const rows = document.querySelectorAll(".row");

        rows.forEach(row => {
          const categorySpan = row.querySelector(".componentName");
          if (categorySpan && categorySpan.textContent.trim().toLowerCase() === category.toLowerCase()) {

            const base = data.base || '';
            const promo = data.promo || '';
            const shipping = data.shipping || '';
            const tax = data.tax || '';
            const availability = data.availability || '';
            const price = data.price || '';
            const affiliateUrl = data.affiliateUrl || '#';
            const title = data.title || '';
            const image = data.image || '';

            const truncatedTitle = title.length > 70 ? title.slice(0, 70) + "..." : title;
            const escapedTitle = truncatedTitle.replace(/</g, "&lt;").replace(/>/g, "&gt;");

            // Update selected image and title
            if (row.querySelector(".selection")) {
              row.querySelector(".selection").innerHTML = `
                <div class="product-selected" style="display: flex; align-items: center; gap: 12px;">
                  <img src="${image}" alt="${escapedTitle}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 6px;">
                  <div style="flex: 1;">
                    <strong style="font-size: 14px; display: block;">${escapedTitle}</strong>
                  </div>
                </div>`;
            }

            // Update pricing, availability, and shipping info
            if (row.querySelector(".base")) row.querySelector(".base").textContent = base;
            if (row.querySelector(".promo")) row.querySelector(".promo").textContent = promo;
            if (row.querySelector(".shipping")) row.querySelector(".shipping").textContent = shipping;
            if (row.querySelector(".tax")) row.querySelector(".tax").textContent = tax;
            if (row.querySelector(".availability")) row.querySelector(".availability").textContent = availability;
            if (row.querySelector(".price")) row.querySelector(".price").textContent = price;

            // Update "Buy from Amazon" button
            if (row.querySelector(".where")) {
              row.querySelector(".where").innerHTML = `
                <a href="${affiliateUrl}" target="_blank" rel="nofollow noopener">
                  <img src="http://localhost/pcbuildparts/wp-content/uploads/2025/04/amazon-logo.png" 
                    alt="Buy on Amazon" style="width:80px; height:auto;" />
                </a>`;
            }

            if (row.querySelector(".buy")) {
              row.querySelector(".buy").innerHTML = `
                <a href="${affiliateUrl}" target="_blank" rel="nofollow noopener">
                  <button style="background:#28a745; color:#fff; border:none; padding:6px 12px; border-radius:6px; cursor:pointer;">
                    Buy
                  </button>
                </a>`;
            }

            // Add remove button
            if (row.querySelector(".cancel")) {
              row.querySelector(".cancel").innerHTML = `
                <button class="remove-from-builder" data-category="${category}"
                  style="background:none; border:none; font-size:30px; font-weight:bold; cursor:pointer; color:#ccc; line-height:1;">
                  &times;
                </button>`;
            }
          }
        });
        calculateTotalPrice();
      }

      function calculateTotalPrice() {
        let total = 0;
        let parts = 0;

        const priceElements = document.querySelectorAll('.row .price');

        priceElements.forEach(priceEl => {
          const priceText = priceEl.textContent.replace(/[^0-9.]/g, ''); // Remove $ and commas
          const priceValue = parseFloat(priceText);
          if (!isNaN(priceValue)) {
            total += priceValue;
            parts++;
          }
        });

        // Store total in localStorage
        localStorage.setItem('cartTotal', total.toFixed(2));
        localStorage.setItem('cartPartsCount', parts);

        // Update builder list total (if exists)
        const totalDiv = document.getElementById('products_total_price');
        if (totalDiv) {
          totalDiv.style.cssText = 'margin-top: 20px; font-size: 18px; font-weight: bold; text-align: right;';
          totalDiv.textContent = `Total: $${total.toFixed(2)}`;
        }

        // Update parts count and total on another page
        const partsCountEl = document.getElementById('parts_count');
        const partsTotalEl = document.getElementById('parts_total_price');

        if (partsCountEl) partsCountEl.textContent = parts;
        if (partsTotalEl) partsTotalEl.textContent = `$${total.toFixed(2)}`;
      }


      // Remove item from builder and refresh
      document.addEventListener("click", function (e) {
        if (e.target.classList.contains("remove-from-builder")) {
          const category = e.target.dataset.category.toLowerCase();
          localStorage.removeItem(`pcbuild_${category}`);
          location.reload(); // Optional: Use more elegant UI clearing
        }
      });

      // Close modal and clear content
      window.closePartModal = function () {
        partModal.style.display = "none";
        modalOverlay.style.display = "none";
        popupContent.innerHTML = '';
      };
      
    });
  </script>